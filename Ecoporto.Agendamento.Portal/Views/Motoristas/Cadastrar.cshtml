@model Ecoporto.Agendamento.Portal.Models.ViewModels.MotoristaViewModel
@using Ecoporto.Agendamento.Portal.Helpers
@Styles.Render("~/Content/css/form.css")

@{
    ViewBag.Title = "Cadastrar Motoristas";

}

<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
</head>
<div class="row">

    <div class="col-md-12">

        <section class="content-header mt-5">
            <h1>
                Gerenciamento de Motoristas
            </h1>
            <ol class="breadcrumb">
                <li>
                    <a href="#">
                        <i class="fa fa-home"></i>Home
                    </a>
                </li>
                <li>
                    <a href="#">Motoristas</a>
                </li>
                <li class="active">Cadastrar Motoristas Novo</li>
            </ol>
        </section>

        @using (Ajax.BeginForm("Cadastrar", "Motoristas", null, new AjaxOptions
        {
            OnBegin = "validarCamposObrigatorios",
            OnSuccess = "mensagemSucesso",
            OnFailure = "mensagemErro",
            HttpMethod = "POST"
        }, new { id = "frmCadastroAgendamento" }))
        {
            <div class="card">
                <div class="card-header">
                    <i class="fa fa-edit fa-lg"></i>
                    Detalhes do Motorista
                    <div class="float-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip" title="Collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">

                                @Html.ValidarFormulario(ViewContext.ViewData.ModelState, false)

                                <div id="pnlMotoristaChronos" class="alert alert-info alert-dismissible fade show invisivel" role="alert">
                                    <strong>Motorista encontrado!</strong> Atualize somente os campos necessários
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>

                                <div id="msgSucesso" class="invisivel alert alert-success" role="alert">
                                    Motorista cadastrado com sucesso!
                                </div>

                                <div class="form-group">
                                    <div id="msgErro" class="invisivel alert alert-danger" role="alert"></div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="row ml-1">
                        @Html.CheckBoxFor(model => model.Chkestrangeiro, new { @id = "chkestrangeiro", @class = "form-check-label" })
                        <label for="chkestrangeiro"> &nbsp;&nbsp;Estrangeiro</label>
                    </div>


                    <div class="row" id="cnh">

                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.CNH, new { @class = "label-required" })
                            @Html.EditorFor(model => model.CNH, new { htmlAttributes = new { @class = "form-control", @id = "CNH", maxlength = "15", autofocus = "autofocus" } })
                            <div id="cnhError" class="text-danger"></div>
                        </div>

                        <div class="form-group col-md-2">
                            <label for="btnPesquisarCNH"></label>
                            <a id="btnPesquisarCNH" href="#" class="btn btn-outline-info btn-block btn-as-block" data-url-pesquisar="@Url.Action("PesquisarCNH", "Motoristas")" onclick="PesquisarCNH(this)">
                                <i class="fas fa-search"></i>&nbsp;&nbsp;Pesquisar
                            </a>
                        </div>


                    </div>

                    <div class="row">
                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.Nome, new { @class = "label-required" })
                            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus", maxlength = "50", @readonly = "readonly" } })
                        </div>
                    </div>
                    <div class="row">
                        <label class="label-required ml-3">
                            Gênero
                        </label>
                    </div>
                    <div class="row">
                        <div class="form-check form-check-inline ml-3">
                            @Html.CheckBoxFor(model => Model.F, new { @class = "form-check-input" })
                            <label class="form-check-label" for="inlineCheckbox1">F</label>
                        </div>
                        <div class="form-check form-check-inline ml-3">
                            @Html.CheckBoxFor(model => Model.M, new { @class = "form-check-input" })
                            <label class="form-check-label" for="inlineCheckbox1">M</label>
                        </div>
                        @Html.HiddenFor(Model => Model.Chkestrangeiro)
                    </div>
                    <div class="row">
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.DT_Nascimento, new { @class = "label-required" })
                            @Html.EditorFor(model => model.DT_Nascimento, new { htmlAttributes = new { @class = "form-control ", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(m => m.DT_Nascimento, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.ValidadeCNH, new { @class = "label-required" })
                            @Html.EditorFor(model => model.ValidadeCNH, new { htmlAttributes = new { @class = "form-control data", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-md-2" id="carteirahabilitacao">
                            @Html.LabelFor(model => model.Carteira_Habilitacao)
                            @Html.EditorFor(model => model.Carteira_Habilitacao, new { htmlAttributes = new { @class = "form-control  " } })

                        </div>
                        <div class="form-group col-md-2" id="rg">
                            @Html.LabelFor(model => model.RG, new { @class = "label-required" })
                            @Html.EditorFor(model => model.RG, new { htmlAttributes = new { @class = "form-control", maxlength = "15", @readonly = "readonly" } })
                        </div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Orgao_Emissor, new { @class = "label-required" })
                            @Html.EditorFor(model => model.Orgao_Emissor, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            <div id="orgaoEmissorError" class="text-danger"></div>
                        </div>

                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Data_Emissao, new { @class = "label-required" })
                            @Html.EditorFor(model => model.Data_Emissao, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                            @Html.ValidationMessageFor(m => m.Data_Emissao, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-sm-3" id="passaport">
                            @Html.LabelFor(model => model.Passaport, new { @class = "label-required" })
                            @Html.EditorFor(model => model.Passaport, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-sm-3" id="Dt_Passaport">
                            @Html.LabelFor(model => model.Dt_passaport, new { @class = "label-required" })
                            @Html.EditorFor(model => model.Dt_passaport, new { htmlAttributes = new { @class = "form-control" } })
                        </div>

                        <div class="col-sm-3" id="paises">
                            @Html.LabelFor(model => model.Bigrama, new { @class = "label-required" })
                            @Html.DropDownListFor(model => model.Bigrama, new MultiSelectList(Model.Paises, "bigrama", "descr"), string.Empty, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="row">
                        <div class="form-group col-md-2" id="cpf">
                            @Html.LabelFor(model => model.CPF, new { @class = "label-required" })
                            @Html.EditorFor(model => model.CPF, new { htmlAttributes = new { @class = "form-control cpf", maxlength = "14", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.Celular)
                            @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control celular", maxlength = "15", @readonly = "readonly" } })
                        </div>
                        @*<div class="form-group col-md-2">
                            @Html.LabelFor(model => model.Nextel)
                            @Html.EditorFor(model => model.Nextel, new { htmlAttributes = new { @class = "form-control", maxlength = "20", @readonly = "readonly" } })
                        </div>*@
                        <div class="form-group col-md-2">
                            @Html.LabelFor(model => model.MOP)
                            @Html.EditorFor(model => model.MOP, new { htmlAttributes = new { @class = "form-control", maxlength = "15", @readonly = "readonly" } })
                        </div>
                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => model.UltimaAlteracao)
                            @Html.EditorFor(model => model.UltimaAlteracao, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        </div>
                    </div>

                </div>

                <div class="card-footer">

                    <div class="row">
                        <div class="form-group col-md-2">
                            <a href="@Url.Action("Index", "Motoristas")" class="btn btn-secondary btn-block">Retornar</a>
                        </div>
                        <div class="form-group col-md-2 offset-md-8">
                            <button id="btnSalvarMotorista" type="submit" class="btn btn-info btn-block">Salvar</button>
                        </div>
                    </div>

                </div>

            </div>

        }
    </div>

</div>

@section Scripts{
    <!-- jQuery (necessário para o Bootstrap Datepicker e jQuery Mask Plugin) -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <!-- jQuery Mask Plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.16/jquery.mask.min.js"></script>

    <!-- Bootstrap Datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>

    <!-- Idioma pt-BR do Bootstrap Datepicker -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/locales/bootstrap-datepicker.pt-BR.min.js"></script>

    <!-- Script personalizado -->
    <script src="~/Scripts/Validacoes/ValidacoesMotorista.js"></script>

    <script>
        $(document).ready(function () {
            
            // Calcula a data de hoje
            var hoje = new Date();

            // Calcula a data de 18 anos atrás (data mínima permitida)
            var minDate = new Date(hoje.getFullYear() - 18, hoje.getMonth(), hoje.getDate());

            // Calcula a data de 100 anos atrás (data máxima permitida)
            var maxDate = new Date(hoje.getFullYear() - 100, hoje.getMonth(), hoje.getDate());

            // Inicializando o Datepicker com a faixa de datas permitida
            $('#DT_Nascimento').datepicker({
                format: 'dd/mm/yyyy',   // Definindo o formato como dd/MM/yyyy
                autoclose: true,        // Fecha o Datepicker automaticamente após a seleção
                todayHighlight: true,   // Destaque a data de hoje no Datepicker
                language: 'pt-BR',      // Configura o idioma
                startDate: maxDate,     // Data mínima: 100 anos atrás
                endDate: minDate        // Data máxima: 18 anos atrás
            }).on('changeDate', function (e) {
                // Chama a função validarDtNascimento do arquivo ValidacoesMotorista.js
                validarDtNascimento($(this));
            });


            // Inicializando o Datepicker para o campo ValidadeCNH
            $('#ValidadeCNH').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true,
                language: 'pt-BR',
                startDate: hoje // Impede a seleção de datas no passado
            }).on('changeDate', function (e) {
                // Chama a função de validação ao fechar o datepicker
                validarValidadeCNH($(this));
            });

            // Inicializando o Datepicker para o campo Data_Emissao
            $('#Data_Emissao').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true,
                language: 'pt-BR',
                endDate: hoje  // Impede a seleção de datas futuras
            }).on('changeDate', function (e) {
                // Chama a função de validação ao fechar o datepicker
                validarDataEmissao($(this));
            });

            // Inicializando o Datepicker para o campo Passaporte
            $('#Dt_passaport').datepicker({
                format: 'dd/mm/yyyy',
                autoclose: true,
                todayHighlight: true,
                language: 'pt-BR'
            }).on('changeDate', function (e) {
                // Chama a função de validação ao fechar o datepicker
                validarDataEmissao($(this));
            });
            $(document).ready(function () {
                $('#CNH').blur(function () {
                    validarCNH();
                });
            });

            $("#Chkestrangeiro").hide();

        });

        $(document).ready(function () {
            // Desabilitar o botão inicialmente se o campo CNH estiver vazio
            $('#btnPesquisarCNH').addClass('disabled');

            // Monitorar alterações no campo CNH
            $('#CNH').on('input', function () {
                var cnhValue = $(this).val().trim();

                if (cnhValue === "") {
                    // Se o campo CNH estiver vazio, desabilitar o botão
                    $('#btnPesquisarCNH').addClass('disabled');
                } else {
                    // Se o campo CNH tiver valor, habilitar o botão
                    $('#btnPesquisarCNH').removeClass('disabled');
                }
            });
        });

        $('#Validade_CNH').mask('00/00/0000');
        $('#Data_Emissao').mask('00/00/0000');
        $('#DT_Nascimento').mask('00/00/0000');
        $('#Dt_passaport').mask('00/00/0000');
        $("#carteirahabilitacao").hide();
        $("#Dt_Passaport").hide();
        $('#passaport').hide();
        $("#paises").hide();

        //
        function mostrarErrosResponse(data) {

            var retorno = data.responseJSON;

            if (retorno.erros != null) {

                $('#msgErro')
                    .html('');

                if (retorno.erros.length === 1) {

                    var erro = retorno.erros[0];

                    $('#msgErro')
                        .removeClass('invisivel')
                        .html(erro.ErrorMessage);
                }

                if (retorno.erros.length > 1) {

                    retorno.erros.map(function (erro) {
                        $('#msgErro').append('<li>' + erro.ErrorMessage + '</li>');
                    });
                }

                $('#msgErro')
                    .removeClass('invisivel');

                $(window).scrollTop(0);
            }
        }

        $('#F').click(function () {

            $('#M').prop('checked', false);

        });

        $('#M').click(function () {

            $('#F').prop('checked', false);

        });

        

        function validarCamposObrigatorios() {
            var isEstrangeiro = $('#chkestrangeiro').is(':checked');

            // Define os campos obrigatórios com base no estado do checkbox
            var camposObrigatorios = isEstrangeiro
                ? [
                    { id: '#Nome', mensagem: 'Nome é obrigatório' },
                    { id: '#Passaport', mensagem: 'Passaporte é obrigatório' },
                    { id: '#Dt_passaport', mensagem: 'Data do Passaporte é obrigatória' },
                    { id: '#DT_Nascimento', mensagem: 'Data de Nascimento é obrigatória' },
                    { id: '#ValidadeCNH', mensagem: 'Validade da CNH é obrigatória' },
                    { id: '#Bigrama', mensagem: 'País emissor é obrigatório' },
                    { id: '#Carteira_Habilitacao', mensagem: 'Carteira de Habilitação é obrigatória' }
                ]
                : [
                    { id: '#Nome', mensagem: 'Nome é obrigatório' },
                    { id: '#CNH', mensagem: 'CNH é obrigatória' },
                    { id: '#DT_Nascimento', mensagem: 'Data de Nascimento é obrigatória' },
                    { id: '#Data_Emissao', mensagem: 'Data de Emissão é obrigatória' },
                    { id: '#ValidadeCNH', mensagem: 'Validade da CNH é obrigatória' },
                    { id: '#RG', mensagem: 'RG é obrigatório' },
                    { id: '#Orgao_Emissor', mensagem: 'Orgão Emissor é obrigatório' },
                    { id: '#CPF', mensagem: 'CPF é obrigatório' }
                ];

            //if (validarGenero()) {
            //    $('#msgErro').removeClass('invisivel').html(camposVazios[0].mensagem);
            //    $(camposVazios[0].id).focus(); // Coloca o foco no primeiro campo vazio
            //    $('#btnSalvarMotorista')
            //        .html('Salvar')
            //        .removeClass('disabled');
            //    return false; // Impede o envio do formulário
            //};

            var camposVazios = camposObrigatorios.filter(function (campo) {
                return !$(campo.id).val().trim(); // Verifica se o campo está vazio
            });

            if (camposVazios.length > 0) {
                // Exibe uma mensagem para o primeiro campo obrigatório que estiver vazio
                $('#msgErro').removeClass('invisivel').html(camposVazios[0].mensagem);
                $(camposVazios[0].id).focus(); // Coloca o foco no primeiro campo vazio
                $('#btnSalvarMotorista')
                    .html('Salvar')
                    .removeClass('disabled');
                return false; // Impede o envio do formulário
            }

            $('#msgErro').addClass('invisivel').html(''); // Limpa a mensagem de erro se todos os campos estiverem preenchidos
            return true; // Permite o envio do formulário
        }

        function validarGenero() {
            // Verifica se pelo menos um dos campos F ou M está marcado
            const generoF = $('#F').is(':checked');
            const generoM = $('#M').is(':checked');

            if (!generoF && !generoM) {
                // Exibe uma mensagem de erro se nenhum campo estiver marcado
                $('#generoError').removeClass('invisivel').html("Por favor, selecione o gênero (F ou M).");
                return false;
            } else {
                // Remove a mensagem de erro se um dos campos estiver marcado
                $('#generoError').addClass('invisivel').html('');
                return true;
            }
        }

        var mensagemErro = function (xhr, status) {
            var errorMessage = xhr.responseJSON?.mensagem || 'Ocorreu um erro ao processar a solicitação.';
            $('#msgErro').removeClass('invisivel').html(errorMessage);

            $('#btnSalvarMotorista')
                .html('Salvar')
                .removeClass('disabled');
        };
    </script>
}